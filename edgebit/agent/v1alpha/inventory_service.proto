syntax = "proto3";
package edgebit.agent.v1alpha;

import "google/protobuf/timestamp.proto";

/*
 * InventoryService is used to report which packages are installed and are in-use
 */
service InventoryService {
    // Reports that a workload, such as a host or a container, was started.
    // DEPRECATED: Use UpsesrtWorkloads
    rpc UpsertWorkload(UpsertWorkloadRequest) returns (UpsertWorkloadResponse) {};

    // Send updated information about the workloads. Unlike the Snapshot(), this does
    // not represent the complete state of the cluster. It only communicates
    // the changes.
    rpc UpsertWorkloads(UpsertWorkloadsRequest) returns (UpsertWorkloadsResponse) {};

    // Uploads the SBOM for a particular image.
    rpc UploadSbom(stream UploadSbomRequest) returns (UploadSbomResponse) {};

    // Report files that were used (open) on the machine
    rpc ReportInUse(ReportInUseRequest) returns (ReportInUseResponse) {};

    // Sends the complete state of the kube cluster. Any workloads that are
    // not present in this request (for a given cluster) should be treated
    // as stopped.
    rpc ResetWorkloads(ResetWorkloadsRequest) returns (ResetWorkloadsResponse) {};

    // Send a list of known machines. This is primarily used by the cluster agent.
    rpc UpsertMachines(UpsertMachinesRequest) returns (UpsertMachinesResponse) {};

    // Send a list of known clusters. This is primarily used by the cluster agent.
    rpc UpsertClusters(UpsertClustersRequest) returns (UpsertClustersResponse) {};
}

message Host {
    // The hostname as reported by gethostname()
    string hostname = 1;

    // VM instance ID (e.g. EC2 instance); optional
    string instance = 2;

    // Distro pretty name (from /etc/eos-release)
    string os_pretty_name = 3;
}

message Container {
    // The name as assigned by the container runtime; optional
    string name = 1;
}

// namespaces
// k8s, vm, ec2, ec2label, gce, user-label:bu=accounting

message Workload {
    map<string, string> labels = 1;

    oneof kind {
        Host host = 2;
        Container container = 3;
    }
}

// An image with no further details. This primarily happens when an SBOM tool
// (e.g. syft) is ran on the workload (e.g. after a host boots)
message GenericImage {
}

// Docker image
message DockerImage {
    // Potentially full tag in registry/user/name:tag format.
    // The full format does not need to be used. The same defaults
    // that "docker pull" assumes will work.
    string tag = 1;
}

message AMI {
    string name = 1;

    repeated string tags = 2;
}

message Image {
    // type: Docker | OCI | AMI | ...
    oneof kind {
        GenericImage generic = 1;
        DockerImage docker = 2;
        AMI ami = 3;
    }
}

message ResetWorkloadsRequest {
    // Globally unique ID of a Kube (or ECS) cluster.
    // For Kube: the value is that of UID of kube-system namespace.
    string cluster_id = 1;

    repeated WorkloadInstance workloads = 2;
}

message ResetWorkloadsResponse {}

message WorkloadSnapshotsResponse {}

message UpsertWorkloadRequest {
    // UUID of the workload
    string workload_id = 1;

    // Workload type and type specific data
    Workload workload = 2;

    // Host boot time, container start time, etc; if missing, start_time is unknown.
    // If an update, the previous known start time can be preserved.
    google.protobuf.Timestamp start_time = 3;

    // Host shutdown time, container stop time, etc. If missing:
    // If an insert, the container is running
    // If an update, the previous known end time can be preserved.
    google.protobuf.Timestamp end_time = 4;

    // Image ID (as registered by a previous UploadSbom()); optional
    string image_id = 5;

    // Image type and type specific data; optional
    Image image = 6;

    // Machine ID as reported by /etc/machine-id
    string machine_id = 7;
}

message UpsertWorkloadResponse {}

enum SbomFormat {
    SBOM_FORMAT_UNSPECIFIED = 0;
    SBOM_FORMAT_SYFT = 1;
}

message UploadSbomHeader {
    SbomFormat format = 1;
    string image_id = 2;
    Image image = 3;
}

message UploadSbomRequest {
    oneof kind {
        UploadSbomHeader header = 1;
        bytes data = 2;
    }
}

message UploadSbomResponse {}

message PkgInUse {
    // id of the package as was identified by the id field of Rpm/Deb/etc.
    // If id is empty, it implies that the package is unknown.
    string id = 1;
    repeated string files = 2;
}

message ReportInUseRequest {
    repeated PkgInUse in_use = 1;
    string workload_id = 2;
}

message ReportInUseResponse {}

message WorkloadInstance {
    // UUID of the workload
    string workload_id = 1;

    // Workload type and type specific data
    Workload workload = 2;

    // Host boot time, container start time, etc; if missing, start_time is unknown.
    // If an update, the previous known start time can be preserved.
    google.protobuf.Timestamp start_time = 3;

    // Host shutdown time, container stop time, etc. If missing:
    // If an insert, the container is running
    // If an update, the previous known end time can be preserved.
    google.protobuf.Timestamp end_time = 4;

    // Image ID (as registered by a previous UploadSbom()); optional
    string image_id = 5;

    // Image type and type specific data; optional
    Image image = 6;

    // Machine ID as reported by /etc/machine-id
    string machine_id = 7;
}

message UpsertWorkloadsRequest {
    // Globally unique ID of the Kube cluster. The value is that of UID of kube-system namespace.
    string cluster_id = 1;

    repeated WorkloadInstance workloads = 2;
}

message UpsertWorkloadsResponse {}

message Machine {
    // ID taken from /etc/machine-id
    string id = 1;

    // Hostname reported by gethostname(), the cluster cluster manager or user specified
    string hostname = 2;
}

message UpsertMachinesRequest {
    repeated Machine machines = 1;
}

message UpsertMachinesResponse {}

enum ClusterKind {
    CLUSTER_KIND_UNSPECIFIED = 0;
    CLUSTER_KIND_KUBE = 1;
}

message Cluster {
    ClusterKind kind = 1;

    // A unique ID, such as a UUID or an ARN of the cluster
    string id = 2;

    // A user friendly name; optional.
    string name = 3;
}

message UpsertClustersRequest {
    repeated Cluster clusters = 1;
}

message UpsertClustersResponse {}
